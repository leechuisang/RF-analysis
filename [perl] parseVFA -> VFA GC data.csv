# Script to extract VFA FileID, Sample_ID, Counts and Result (VFA-type) from raw .TXT file
# Must place Perl script in same directory as .TXT files exported from the GC.
# This creates 2 output files, a .CSV file containing all the Results that are not 0,
# and a .ZIP file containing all the .TXT and .RUN files in the same dir in compressed form.
# The .CSV and .ZIP files will start with the current date followed by the dir name in format:
# YYYY-MM-DD_DIRNAME_GCdata.EXT"
# Version 2.20.09.21

#!/usr/bin/perl
use strict;
#use warnings;
no warnings;
use Cwd;
use File::Basename;
use POSIX qw(strftime);
use IO::Compress::Zip qw(:all); # Use Zip package

my @files = glob("*.TXT");

my $cwd = basename(cwd());

my $datestring = strftime "%Y-%m-%d", gmtime;

my $outfile = "${datestring}_${cwd}_GCdata.csv";

# Open and clear the output directory file otherwise >>output below will append data to existing file
open(OUTPUT, ">$outfile"), printf OUTPUT "FileID, Sample_ID, Peaks, Counts, Result, Name\n";

# Read each .txt file in current directory
foreach my $filename(@files){
  open(FILE, $filename) or die "Could not read from $filename, program halting.";

  # Remove 3-digit suffix and .TXT from filename then notify when done
  my $formatname = $filename =~ s/0[0-9][0-9]//r;
  $formatname =~ s/.TXT//g;
  print "$filename done\n";

  ## Bonus: Add filename to list of uniques for any particular reason
  # my %unique = ();
  # $unique{$formatname\} ++;

  # Use ">>VFA_${filename}.extension" if you want separate files for each sample else leave as VFA_result"
  open(OUTPUT, ">>$outfile") or die "Could not prepare output file";
  while(<FILE>)
  {
    # Ignore all header data and jump to data for mining
    next if (1.. /Peaks/);

    # get rid of the pesky newline character
    chomp;

    # read the fields in the current record as separate variables based on tab
    my @cols = split('\t');

    #Print selected results to output file if $Result is not empty
    if ($cols[6] eq "INT STD"|$cols[6] != 0) # Invisible errors in perl but not major
    { 
      # Print result to file designated OUTPUT
	  print OUTPUT "$filename, $formatname, $cols[0], $cols[5], $cols[6], $cols[7]\n";  
    }
  }
  close(FILE);
  close(OUTPUT);
}

my $zip = "$datestring $cwd GCdata.zip"; # Define output zip file

zip [ glob("*.run *.txt") ] => "$zip", Zip64 => 1, Level => Z_BEST_COMPRESSION, AutoClose => 1, ZipComment => "Zipped using parseVFA v2.20.09.21.pl"
&& print "*** Zipped all .TXT and .RUN files! ***\n" # Find all extension types to zip and save to output
or die "*** Cannot create zip file ***\n: $ZipError"; # Show error otherwise

unlink glob("*.run *.txt");

close
